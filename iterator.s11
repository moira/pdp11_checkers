.=torg+1000

main :		mov pc, sp 					;just a test
			tst -(sp)					;adjust the sp
			mov r4, -(sp)				;put smth in r0 to check that it comes back afterwards
			clr r4						;clear r4 to be able to use it later
			mov #Source, -(sp)
			mov #Dest, -(sp)
			mov #WinParam, -(sp)
			jrs pc, getMaxWP 
			add #6, sp
			mov (sp)+, r4				;return to r4 its value
			halt

;WinParam 2(sp), Dest 4(sp), Source 6(sp)
getMaxWP :	mov #Board, -(sp)
			mov #Player, -(sp)
			mov #Steps, -(sp)
			mov 14(sp), -(sp)	;source
			mov 14(sp), -(sp)	;dest
			mov 14(sp), -(sp)	;winParam
			jsr pc, miniMax
			add #14, sp
			rts sp

;winParam 2(sp), dest 4(sp), source 6(sp), steps 10(sp), player 12(sp), board 14(sp)
miniMax :	mov #0, -(sp)
			mov 16(sp), -(sp)	;board address
			mov @16(sp), -(sp)	;current player
			jrs checkWin
			add #4, sp
			cmp #1, (sp)+
			mov #20, @2(sp)
			


;main :		mov pc, sp 					;just a test
;			tst -(sp)					;adjust the sp
;			mov #122, r4 				;for test purposes only
;			mov r4, -(sp)				;put smth in r0 to check that it comes back afterwards
;			clr r4						;clear r4 to be able to use it later
;			mov #Board, -(sp) 			;pass board in stack
;			mov Player, -(sp) 			;pass Player in stack
;			jsr pc, calcWP  			;go to calcWP
;			add #4, sp 					;adjust the stack
;			mov (sp)+, r4				;return to r4 its value
;			halt						;finish the test

;4(sp) is board, 2(sp) is player

calcWP :	mov #0, -(sp)		;create a field for the iterator's output
			mov 6(sp), -(sp)	;copy board to pass it to the iterator
			mov 6(sp), -(sp)	;copy player to pass it to the iterator
			mov #addOne, -(sp)	;pass this function to the iterator
			jsr pc, iterator 	;go to the iterator with all that stuff
			mov 6(sp), r4		;put the returned number into the register
			mov #0, 6(sp)		;set the output field to 0 again
			cmp 2(sp), #1		;change the player that is passed to the iterator (next 4 lines too)
			beq setToTwo		
			mov #1, 2(sp)
			br calcOpp			
setToTwo :	mov #2, 2(sp)		
calcOpp:	jsr pc, iterator	;run the iterator with the opponent as player
			sub @6(sp), r4		;subtract the result from r4
			add #10, sp 		;adjust the stack
			rts pc 				;return to main


;checkWin
;check if the opponent has any pieces
;check if the player or the opponent can move
;receives
;returns
checkWin :	mov anyPiece, -(sp)
			;sets output field to -1
			;change player to opponent
			jsr pc, iterator
			;check what was returned
			tst 4(sp)
			beq chwTrue
findMove :	mov anyMoves, -(sp)
			jsr pc, iterator
			;change player, call iterator with the new player
			;if the first returned moves, return -1
			;otherwise check the second one, if it returned that there are no moves,
			;check count WP
chwEnd :	;adjust stack
			;return the result
			;moves the result where it should be
			rts pc

;iterator
;if you meet Player's piece on the board, do something with it
;receives: output field 10(sp), board 6(sp), player 4(sp), function 2(sp)

iterator :	mov #177777, -(sp)		;creates an iterator to count steps
			mov 10(sp), -(sp)		;creates a copy of the board address
			sub #2, (sp)			;sets the current address to the word just before the board for convenient iteration		
iterLoop :	add #2, (sp)			;increments the address in order for it to point to the next square
			inc 2(sp)				;increments the number of the square (from 0 to 77)
			cmp 2(sp), #7			;checks if there are any squares left ;should be 77, this is a test version
			bge iterEnd				;if there are none, ends iteration					
			cmp @(sp), 10(sp)		;does the square contain the token of the player that was passed to the iterator?
			bne iterLoop			;if it doesn't, just continue to iterate over squares
iterCall :	;check function type
			;pass
			jsr pc, @6(sp) 			;goes to the passed function
			br iterLoop				;after you return from the called function, continue
iterEnd :	add #4, sp				;deletes the count of steps and the copy of the board
			rts pc 					;returns to the calling function

;passes to the pointed function: address on board 2(sp), squareID 4(sp), player 12(sp), output field 16(sp)

;increments the output -- a simple example of a function that can be passed to the iterator as a pointer
addOne :	inc 16(sp)
			rts pc

;makes iterator stop if there are any pieces on the board
anyPiece :	mov #77, 6(sp)
			mov #-1, 16(sp)
			rts pc

anyMove :	;if canMoveR != -1, return 1, set counter to 77
			;if canMoveL != -1, return 1, set counter to 77


canMove :	;checks if a piece can move r
			;if it can, call movePiece
			;call minimax
			;decrement step (in stack)
			;receive source and dest and WP from minimax
			;compare with global WP
			;if is bigger, replace it (sorce and dest as well)
			;then check if it can move left and do the same



;ID, board, player
canMoveR :	mov #0, -(sp)		;first vs second check counter (just move vs eat)
cmrRecur :	add #1, (sp)
			mov 14(sp), -(sp)	;copy player
			mov 6(sp), -(sp)	;copy square ID
			jsr testEdge
			tst (sp)+
			cmp (sp)+, #1 		;check border
			bne cmrRet-1		;border check failed => return -1
riEdge :	mov 6(sp), -(sp) 	;check right edge
			bic #177770, (sp)
			cmp (sp)+, #7
			beq cmrRet-1
			cmp 12(sp), #1
			beq movWhite
			mov #10, -(sp)		;put row step in the stack
			br isEmpty
movWhite :	mov #-10, -(sp)
isEmpty : 	mov 4(sp), -(sp)	
			add (sp), @2(sp)*2
			add (sp), #2
			;check emptiness of a cell in question
			;count the address we need to check (based on player : (+10 or -10) + 1)
			;mov @8(sp), -(sp)	;board address
			;mov 6(sp), -(sp)	;player
			cmp @(sp), #0		
			beq retMove
			cmp @(sp), 4(sp)	;player
			beq cmrRet-1
			cmp 6(sp), #2		;iteration counter
			beq cmrRet-1
			;change squareID
			cmp 4(sp), #1
			beq toBlack
			mov #1, 4(sp)
			br tryToEat
toBlack :	mov #2, 4(sp)
tryToEat :	jsr cmrRecur
cmrRet-1 :	tst (sp)+
			mov #177777, 16(sp)
			rts pc
retMove :	;place the current point into the stack
			;adjust stack -- deletes iteration counter, player copy
			mov 22(sp), 6(sp)		;ID before move
			add 22(sp), 10(sp)	;step
			add 22(sp), #1		;right step
			;adjust stack
			rts pc

;copy for left check

;passed are player ID 4(sp) and square ID 2(sp)
;returns result in 4(sp)
;tests if the player is close to the edge of the board
testEdge :	mov 4(sp), -(sp)
			bic #177707, (sp)
			cmp 6(sp), #1	;check if player is 1
			bne blaEdge
whiEdge :	cmp (sp), #0
			beq edge-1
			br edge1
blaEdge :	cmp (sp), #7
			beq edge-1 
edge1 :		mov #1, 6(sp)
			tst (sp)+
			rts pc
edge-1 :	mov #177777, 6(sp)
			tst (sp)+
			rts pc


.=torg+11000

Board:		.word	0,	2,	0,	1,	0,	1,	0,	0
			.word	1,	0,	1,	0,	0,	0,	2,	0
			.word	0,	2,	0,	1,	0,	1,	0,	1
			.word	1,	0,	1,	0,	1,	0,	2,	0
			.word	0,	2,	0,	1,	0,	1,	0,	1
			.word	1,	0,	1,	0,	1,	0,	2,	0
			.word	0,	2,	0,	2,	0,	2,	0,	1
			.word	1,	0,	1,	0,	1,	0,	1,	0
									
Player:		.word	2